// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/gateway/gateway.proto

package gatewaypb

import (
	authpb "/authpb"
	datapb "/datapb"
	syncpb "/syncpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gateway_Register_FullMethodName      = "/gateway.Gateway/Register"
	Gateway_Login_FullMethodName         = "/gateway.Gateway/Login"
	Gateway_ValidateToken_FullMethodName = "/gateway.Gateway/ValidateToken"
	Gateway_Refresh_FullMethodName       = "/gateway.Gateway/Refresh"
	Gateway_Add_FullMethodName           = "/gateway.Gateway/Add"
	Gateway_Get_FullMethodName           = "/gateway.Gateway/Get"
	Gateway_GetBatch_FullMethodName      = "/gateway.Gateway/GetBatch"
	Gateway_GetUpdates_FullMethodName    = "/gateway.Gateway/GetUpdates"
	Gateway_AddUpdate_FullMethodName     = "/gateway.Gateway/AddUpdate"
	Gateway_Time_FullMethodName          = "/gateway.Gateway/Time"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// Auth
	Register(ctx context.Context, in *authpb.RegisterRequest, opts ...grpc.CallOption) (*authpb.RegisterResponse, error)
	Login(ctx context.Context, in *authpb.LoginRequest, opts ...grpc.CallOption) (*authpb.LoginResponse, error)
	ValidateToken(ctx context.Context, in *authpb.ValidateTokenRequest, opts ...grpc.CallOption) (*authpb.ValidateTokenResponse, error)
	Refresh(ctx context.Context, in *authpb.RefreshRequest, opts ...grpc.CallOption) (*authpb.RefreshResponse, error)
	// Data
	Add(ctx context.Context, in *datapb.AddRequest, opts ...grpc.CallOption) (*datapb.AddResponse, error)
	Get(ctx context.Context, in *datapb.GetRequest, opts ...grpc.CallOption) (*datapb.GetResponse, error)
	GetBatch(ctx context.Context, in *datapb.GetBatchRequest, opts ...grpc.CallOption) (*datapb.GetBatchResponse, error)
	// Sync
	GetUpdates(ctx context.Context, in *syncpb.GetUpdatesRequest, opts ...grpc.CallOption) (*syncpb.GetUpdatesResponse, error)
	AddUpdate(ctx context.Context, in *syncpb.AddUpdateRequest, opts ...grpc.CallOption) (*syncpb.AddUpdateResponse, error)
	Time(ctx context.Context, in *syncpb.TimeRequest, opts ...grpc.CallOption) (*syncpb.TimeResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Register(ctx context.Context, in *authpb.RegisterRequest, opts ...grpc.CallOption) (*authpb.RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(authpb.RegisterResponse)
	err := c.cc.Invoke(ctx, Gateway_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Login(ctx context.Context, in *authpb.LoginRequest, opts ...grpc.CallOption) (*authpb.LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(authpb.LoginResponse)
	err := c.cc.Invoke(ctx, Gateway_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ValidateToken(ctx context.Context, in *authpb.ValidateTokenRequest, opts ...grpc.CallOption) (*authpb.ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(authpb.ValidateTokenResponse)
	err := c.cc.Invoke(ctx, Gateway_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Refresh(ctx context.Context, in *authpb.RefreshRequest, opts ...grpc.CallOption) (*authpb.RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(authpb.RefreshResponse)
	err := c.cc.Invoke(ctx, Gateway_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Add(ctx context.Context, in *datapb.AddRequest, opts ...grpc.CallOption) (*datapb.AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(datapb.AddResponse)
	err := c.cc.Invoke(ctx, Gateway_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Get(ctx context.Context, in *datapb.GetRequest, opts ...grpc.CallOption) (*datapb.GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(datapb.GetResponse)
	err := c.cc.Invoke(ctx, Gateway_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetBatch(ctx context.Context, in *datapb.GetBatchRequest, opts ...grpc.CallOption) (*datapb.GetBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(datapb.GetBatchResponse)
	err := c.cc.Invoke(ctx, Gateway_GetBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetUpdates(ctx context.Context, in *syncpb.GetUpdatesRequest, opts ...grpc.CallOption) (*syncpb.GetUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(syncpb.GetUpdatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AddUpdate(ctx context.Context, in *syncpb.AddUpdateRequest, opts ...grpc.CallOption) (*syncpb.AddUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(syncpb.AddUpdateResponse)
	err := c.cc.Invoke(ctx, Gateway_AddUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Time(ctx context.Context, in *syncpb.TimeRequest, opts ...grpc.CallOption) (*syncpb.TimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(syncpb.TimeResponse)
	err := c.cc.Invoke(ctx, Gateway_Time_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
type GatewayServer interface {
	// Auth
	Register(context.Context, *authpb.RegisterRequest) (*authpb.RegisterResponse, error)
	Login(context.Context, *authpb.LoginRequest) (*authpb.LoginResponse, error)
	ValidateToken(context.Context, *authpb.ValidateTokenRequest) (*authpb.ValidateTokenResponse, error)
	Refresh(context.Context, *authpb.RefreshRequest) (*authpb.RefreshResponse, error)
	// Data
	Add(context.Context, *datapb.AddRequest) (*datapb.AddResponse, error)
	Get(context.Context, *datapb.GetRequest) (*datapb.GetResponse, error)
	GetBatch(context.Context, *datapb.GetBatchRequest) (*datapb.GetBatchResponse, error)
	// Sync
	GetUpdates(context.Context, *syncpb.GetUpdatesRequest) (*syncpb.GetUpdatesResponse, error)
	AddUpdate(context.Context, *syncpb.AddUpdateRequest) (*syncpb.AddUpdateResponse, error)
	Time(context.Context, *syncpb.TimeRequest) (*syncpb.TimeResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) Register(context.Context, *authpb.RegisterRequest) (*authpb.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGatewayServer) Login(context.Context, *authpb.LoginRequest) (*authpb.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGatewayServer) ValidateToken(context.Context, *authpb.ValidateTokenRequest) (*authpb.ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedGatewayServer) Refresh(context.Context, *authpb.RefreshRequest) (*authpb.RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedGatewayServer) Add(context.Context, *datapb.AddRequest) (*datapb.AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGatewayServer) Get(context.Context, *datapb.GetRequest) (*datapb.GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGatewayServer) GetBatch(context.Context, *datapb.GetBatchRequest) (*datapb.GetBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatch not implemented")
}
func (UnimplementedGatewayServer) GetUpdates(context.Context, *syncpb.GetUpdatesRequest) (*syncpb.GetUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}
func (UnimplementedGatewayServer) AddUpdate(context.Context, *syncpb.AddUpdateRequest) (*syncpb.AddUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpdate not implemented")
}
func (UnimplementedGatewayServer) Time(context.Context, *syncpb.TimeRequest) (*syncpb.TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Time not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authpb.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Register(ctx, req.(*authpb.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authpb.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Login(ctx, req.(*authpb.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authpb.ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ValidateToken(ctx, req.(*authpb.ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(authpb.RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Refresh(ctx, req.(*authpb.RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datapb.AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Add(ctx, req.(*datapb.AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datapb.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Get(ctx, req.(*datapb.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datapb.GetBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetBatch(ctx, req.(*datapb.GetBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(syncpb.GetUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetUpdates(ctx, req.(*syncpb.GetUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AddUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(syncpb.AddUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AddUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AddUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AddUpdate(ctx, req.(*syncpb.AddUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(syncpb.TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Time_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Time(ctx, req.(*syncpb.TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gateway_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gateway_Login_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Gateway_ValidateToken_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Gateway_Refresh_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Gateway_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Gateway_Get_Handler,
		},
		{
			MethodName: "GetBatch",
			Handler:    _Gateway_GetBatch_Handler,
		},
		{
			MethodName: "GetUpdates",
			Handler:    _Gateway_GetUpdates_Handler,
		},
		{
			MethodName: "AddUpdate",
			Handler:    _Gateway_AddUpdate_Handler,
		},
		{
			MethodName: "Time",
			Handler:    _Gateway_Time_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gateway/gateway.proto",
}
